cmake_minimum_required(VERSION 3.10)
set(PROJECT_NAME "flutter_soloud")
project(${PROJECT_NAME} LANGUAGES CXX)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(PLUGIN_NAME "${PROJECT_NAME}_plugin")

set(SRC_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../src")

## Add SoLoud custom cmake files
message("**************** SOLOUD CONFIGURE.CMAKE")
include (Configure.cmake)
message("**************** SOLOUD SRC.CMAKE 1")
if (UNIX AND NOT WIN32 AND NOT APPLE)
	if (CMAKE_SIZEOF_VOID_P MATCHES "8")
		set (LIB_POSTFIX "64" CACHE STRING "suffix for 32/64 dir placement")
		mark_as_advanced (LIB_POSTFIX)
	endif ()
endif ()
if (MSVC)
	add_definitions (-D_CRT_SECURE_NO_WARNINGS)
endif()
if (NOT DEFINED LIB_POSTFIX)
  set (LIB_POSTFIX "")
endif ()

include_directories(${SRC_DIR}/soloud/include)
include_directories(${SRC_DIR}/soloud/src)
include_directories(${SRC_DIR})
include (src.cmake)
message("**************** SOLOUD SRC.CMAKE 2  ${TARGET_NAME}")




list(APPEND PLUGIN_SOURCES
  "${SRC_DIR}/common.cpp"
  "${SRC_DIR}/bindings.cpp"
  "${SRC_DIR}/player.cpp"
  "${SRC_DIR}/analyzer.cpp"
  "${SRC_DIR}/synth/basic_wave.cpp"
  "${SRC_DIR}/waveform/waveform.cpp"
  "${SRC_DIR}/audiobuffer/audiobuffer.cpp"
  "${SRC_DIR}/filters/filters.cpp"
  "${SRC_DIR}/filters/pitch_shift_filter.cpp"
  "${SRC_DIR}/filters/smbPitchShift.cpp"
  "${SRC_DIR}/filters/limiter.cpp"
  "${SRC_DIR}/filters/compressor.cpp"
  ${TARGET_SOURCES}
)

add_library(${PLUGIN_NAME} SHARED
  ${PLUGIN_SOURCES}
)
apply_standard_settings(${PLUGIN_NAME})
set_target_properties(${PLUGIN_NAME} PROPERTIES
  CXX_VISIBILITY_PRESET hidden)


  
target_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)
target_include_directories(${PLUGIN_NAME} INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/include")
target_link_libraries(${PLUGIN_NAME} PRIVATE flutter)
target_link_libraries(${PLUGIN_NAME} PRIVATE PkgConfig::GTK)

# # Add opus library
# set(OPUS_LIBRARY ${CMAKE_CURRENT_SOURCE_DIR}/libopus.so)
# # Link the library to your target
# target_link_libraries(${PLUGIN_NAME} PRIVATE ${OPUS_LIBRARY})
# # Set the directory where the library will be installed
# set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")
# include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../src/opus)

# # Add ogg library
# set(OGG_LIBRARY ${CMAKE_CURRENT_SOURCE_DIR}/libogg.so)
# # Link the library to your target
# target_link_libraries(${PLUGIN_NAME} PRIVATE ${OGG_LIBRARY})
# # Set the directory where the library will be installed
# set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")
# include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../src/ogg)

find_library(LIBOPUS_LIBRARY opus)
find_library(LIBOGG_LIBRARY ogg)

if (LIBOPUS_LIBRARY)
    message("libopus found: ${LIBOPUS_LIBRARY}")
else()
    message(WARNING "libopus not found")
endif()

if (LIBOGG_LIBRARY)
    message("libogg found: ${LIBOGG_LIBRARY}")
else()
    message(WARNING "libogg not found")
endif()

if (LIBOPUS_LIBRARY AND LIBOGG_LIBRARY)
    message("libopus and libogg found")
    add_compile_definitions(LIBOPUS_OGG_AVAILABLE)
    target_link_libraries(${PLUGIN_NAME} PRIVATE ${LIBOPUS_LIBRARY})
    target_link_libraries(${PLUGIN_NAME} PRIVATE ${LIBOGG_LIBRARY})
endif()


target_compile_options("${PLUGIN_NAME}" PRIVATE -Wall -Wno-error -Wno-vla -fPIC -O3 -msse3 -msse2) #  -ldl -lpthread -lm

# List of absolute paths to libraries that should be bundled with the plugin.
set(flutter_soloud_bundled_libraries
  $<TARGET_FILE:${PLUGIN_NAME}>
  PARENT_SCOPE
)
